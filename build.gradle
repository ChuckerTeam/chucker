buildscript {
    ext {
        kotlinVersion = '1.4.10'
        androidGradleVersion = '4.1.0'
        coroutineVersion = '1.4.0'

        // Google libraries
        appCompatVersion = '1.2.0'
        constraintLayoutVersion = '2.0.4'
        materialComponentsVersion = '1.2.1'
        roomVersion = '2.2.5'
        fragmentVersion = '1.2.5'
        lifecycleVersion = '2.2.0'
        androidXCoreVersion = '2.1.0'
        paletteKtxVersion = '1.0.0'
        jsonhandleviewVersion = '1.2.2'

        // Networking
        gsonVersion = '2.8.6'
        okhttp3Version = '3.12.10'
        retrofitVersion = '2.6.4'

        // Debug and quality control
        detektVersion = '1.14.0'
        dokkaVersion = '1.4.10.2'
        ktLintVersion = '0.39.0'
        ktLintGradleVersion = '9.4.0'
        leakcanaryVersion = '2.5'

        // Testing
        androidxTestCoreVersion = '1.3.0'
        junitGradlePluignVersion = '1.6.2.0'
        junitVersion = '5.7.0'
        mockkVersion = '1.10.2'
        robolectricVersion = '4.4'
        truthVersion = '1.1'
        vintageJunitVersion = '4.13'

        //jfrog publish
        jfrogExtractor = '4.28.3'
    }

    repositories {
        jcenter()
        google()
        gradlePluginPortal()
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$androidGradleVersion"
        classpath "de.mannodermaus.gradle.plugins:android-junit5:$junitGradlePluignVersion"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokkaVersion"
        classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$detektVersion"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktLintGradleVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$jfrogExtractor"
    }
}

allprojects {
    apply plugin: "com.jfrog.artifactory"
    apply plugin: "maven-publish"

    version = VERSION_NAME
    group = GROUP

    repositories {
        jcenter()
        maven { url "https://jitpack.io" }
        google()
    }

    tasks.withType(Test) {
        testLogging {
            events "skipped", "failed", "passed"
        }
    }
}

task installGitHook(type: Copy) {
    from new File(rootProject.rootDir, 'pre-commit')
    into { new File(rootProject.rootDir, '.git/hooks') }
    fileMode 0777
}

task clean(type: Delete) {
    dependsOn(installGitHook)
    delete rootProject.buildDir
}

ext {
    minSdkVersion = 16
    targetSdkVersion = 30
    compileSdkVersion = 30
}

ext.versionName = { ->
    def currentTag = 'git tag --points-at HEAD'.execute().in.text.toString().trim()
    def currentBranch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.toString().trim()
    def tagRegex = "[0-9.]*[0-9]"
    if (!currentTag.isEmpty() && currentTag.matches(tagRegex)) {// is not empty and is in following format 8.0
        return currentTag
    } else {
        return currentBranch + '-SNAPSHOT'
    }
}

def libraryGroupId = 'com.meesho.android.chucker'
def libraryVersion = versionName()

project('library-no-op') {
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            aar(MavenPublication) {
                groupId = libraryGroupId
                artifactId = 'library-no-op'
                version = libraryVersion
                // Tell maven to prepare the generated "*.aar" file for publishing
                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

                pom.withXml {
                    def dependencies = asNode().appendNode('dependencies')
                    configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                        def dependency = dependencies.appendNode('dependency')
                        dependency.appendNode('groupId', it.moduleGroup)
                        dependency.appendNode('artifactId', it.moduleName)
                        dependency.appendNode('version', it.moduleVersion)
                    }
                }
            }
        }
    }
}
artifactory {
    //The base Artifactory URL if not overridden by the publisher/resolver
    contextUrl = project.properties["JFROG_ARTIFACTORY_URL"]
    publish {
        repository {
            repoKey = libraryVersion.endsWith('-SNAPSHOT') ? project.properties["SNAPSHOT_REPO_NAME"] :
                    project.properties["RELEASE_REPO_NAME"]
            username = project.properties["JFROG_ARTIFACTORY_USERNAME"]
            password = project.properties["JFROG_ARTIFACTORY_KEY"]
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}

