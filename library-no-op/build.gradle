apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

android {
    compileSdkVersion rootProject.compileSdkVersion

    compileOptions {
        kotlinOptions.freeCompilerArgs += [
            '-module-name', "com.github.ChuckerTeam.Chucker.library-no-op",
            "-Xexplicit-api=strict"
        ]
    }

    buildFeatures {
        buildConfig = false
    }

    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
    }

    android {
        compileOptions {
            sourceCompatibility 1.8
            targetCompatibility 1.8
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        // We don't want to impose RTL on consuming applications.
        disable 'RtlEnabled'
        // Don't fail build if some dependencies outdated
        disable 'GradleDependency'
    }
}

dependencies {
    api "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
}

apply from: rootProject.file('gradle/kotlin-static-analysis.gradle')

ext.versionName = { ->
    def currentTag = 'git tag --points-at HEAD'.execute().in.text.toString().trim()
    def currentBranch = 'git rev-parse --abbrev-ref HEAD'.execute().in.text.toString().trim()
    def tagRegex = "[0-9.]*[0-9]"
    if (!currentTag.isEmpty() && currentTag.matches(tagRegex)) {// is not empty and is in following format 8.0
        return currentTag
    } else {
        return currentBranch + '-SNAPSHOT'
    }
}

def libraryGroupId = 'com.meesho.android.chucker'
def libraryVersion = versionName()

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

artifactoryPublish.dependsOn('build')
publishing {
    publications {
        aar(MavenPublication) {
            groupId = libraryGroupId
            artifactId = 'library-no-op'
            version = libraryVersion
            // Tell maven to prepare the generated "*.aar" file for publishing
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact androidSourcesJar

            pom.withXml {
                def dependencies = asNode().appendNode('dependencies')
                configurations.getByName("releaseCompileClasspath").getResolvedConfiguration().getFirstLevelModuleDependencies().each {
                    def dependency = dependencies.appendNode('dependency')
                    dependency.appendNode('groupId', it.moduleGroup)
                    dependency.appendNode('artifactId', it.moduleName)
                    dependency.appendNode('version', it.moduleVersion)
                }
            }
        }
    }
}
artifactory {
    //The base Artifactory URL if not overridden by the publisher/resolver
    contextUrl = project.properties["JFROG_ARTIFACTORY_URL"]
    publish {
        repository {
            repoKey = libraryVersion.endsWith('-SNAPSHOT') ? project.properties["SNAPSHOT_REPO_NAME"] :
                    project.properties["RELEASE_REPO_NAME"]
            username = project.properties["JFROG_ARTIFACTORY_USERNAME"]
            password = project.properties["JFROG_ARTIFACTORY_KEY"]
        }
        defaults {
            // Tell the Artifactory Plugin which artifacts should be published to Artifactory.
            publications('aar')
            publishArtifacts = true
            // Publish generated POM files to Artifactory (true by default)
            publishPom = true
        }
    }
}
